###################################################
#
# Analyze the SimFish2.csv dataset
# Attempt 1
# Sinusoidal Stronium across transect
# Random movement with mixture density
# Generated by the RMDataGen3.R file
#
###################################################

rm(list=ls())

FishBatch1 <- 967:987


# Set the working Directory
setwd( )

library( MASS )
# library( OpenStreetMap )
# library( ggplot2 )
# library( ggmap )

# Read in the data
fish1a <- read.csv( "All_NESP_otolith_10feb20_new_site_species_scann.csv", 
                   header = TRUE, stringsAsFactors = FALSE )
mussel1a <- read.csv( "Region_Site_key_SR_mean_stdev_10feb20.csv", 
                     header = TRUE, stringsAsFactors = FALSE )
MDist1a <- read.csv( "Mit_reg_net_6.3_5.1_10AUG20.csv",
                    header = TRUE, stringsAsFactors = FALSE )
FRange1 <- read.csv( "Fish_range_20JUL21.csv")
#SiteC1 <- read.csv( "Mitchell River data/Processed_data_10JUL19/New_old_site_key2.csv", 
#                    header = TRUE, stringsAsFactors = FALSE )
#LatLong1 <- read.csv( "Mitchell River data/SiteLatLongForMaps2.csv", 
#                      header = TRUE, stringsAsFactors = FALSE ) 

################################################################################
#
# Preprocess the mussel1a data for the new sites
#
################################################################################
# Get the unique water mean and mussel standard deviations for use.
mussel1b <- unique( mussel1a[,c("Region_ID", "AVG_WATER_REGION", "STDEV_MUSSEL_REGION")])
mussel1b$Region_ID <- paste("S", mussel1b$Region_ID, sep = "")


################################################################################
# Number of mussel sites
nSite1 <- nrow( mussel1b )


# Plot the distributions of the mussel1b data
x1 <- seq( min( mussel1b$AVG_WATER_REGION )-0.01, max( mussel1b$AVG_WATER_REGION)+0.01, by= 0.0001)
plot( x1, dnorm( x1,  mussel1b$AVG_WATER_REGION[1], mussel1b$STDEV_MUSSEL_REGION[1] ), 
      type = "l",
      xlab = "Strontium",
      ylab = "Density",
      ylim = c(0,1500) )
for( i in 2:nSite1 ){
  lines( x1, dnorm( x1, mussel1b$AVG_WATER_REGION[i], mussel1a$STDEV_MUSSEL_REGION[i] ), col = i)
}

################################################################################
#
# Get the distances set up and weighted properly.
#
################################################################################
MDist1 <- MDist1a[,2:21]
MDistName1 <- paste("S", MDist1a$X, sep = "")
names( MDist1 ) <- MDistName1
row.names(MDist1) <- MDistName1
for( i in 1:nrow( MDist1 ) ){
  for( j in i:ncol( MDist1 ) ){
    MDist1[ i, j ] <- MDist1[ j , i ]
  }
}

# Get the distance weighting
Distance1 <- 100

# Check this
Dist1 <- exp(-MDist1/Distance1)
row.names(Dist1) <- names(Dist1)

################################################################################
#
# Preprocess the Fish data to fix Region_ID
# 
################################################################################
Region2 <- paste( "S", fish1a$Region_ID, sep = "" )
fish1 <- data.frame(fish1a, Region2 = Region2 )

# Get unique fish ids
FishID1 <- unique( fish1$SAMPLE_CODE )

fish1no <- 1

# Initialize the container
LocProbDummy <- data.frame( matrix(0,nrow = 1, ncol = nSite1) )
names( LocProbDummy ) <- mussel1b$Region_ID
FishOut1 <- data.frame( fish1[1,], LocProbDummy )
FishOut1 <- FishOut1[-1,]
FishOut0 <- FishOut1
FishOut3 <- FishOut1

#LocProbOut1 <-  data.frame( fish1[1,], LocProbDummy )
#LocProbOut1 <- LocProbOut1[-1,]


###############################################################################
#
# Create some simple smoothing functions
#
###############################################################################
# This one looks backwards only
smooth1 <- function( x1, w1 = 5 ){
  n1 <- length( x1 )     # Get the length
  res1 <- rep( 0, n1 )   # Create a container
  res1[ 1:w1 ] <- mean( x1[1:w1] )
  for( i in (w1 + 1):n1 ){
    res1[ i ] <- mean( x1[ (i - w1):i ])
  }
  return( res1 )
}

# This one looks forwards and backwards
smooth2 <- function( x1, w1 = 2 ){
  n1 <- length( x1 )     # Get the length
  res1 <- rep( 0, n1 )   # Create a container
  for( i in 1:n1 ){
    res1[ i ] <- mean( x1[ max( 1, (i - w1)):min((i + w1),n1) ])
  }
  return( res1 )
}

###############################################################################
#
# Make the classifier function
#
###############################################################################
fishLocClass1 <- function(FishData1, mussel1b, Dist1, nSite1 ){
  maxTrack1 <- nrow( FishData1 )
  FishLoc1 <- FishData1$Region2[ maxTrack1 ]
  FishLocOut1 <- matrix( FishLoc1, nrow = maxTrack1, ncol = 1 )
  LocProb1 <- data.frame( matrix( 0, nrow = maxTrack1, ncol = nSite1 ) )
  names(LocProb1) <- mussel1b$Region_ID
  LocProb1[ maxTrack1, ] <- ifelse( FishData1$Region2[ maxTrack1 ] == mussel1b$Region_ID, 1 , 0 ) 
  for( j in (maxTrack1-1):1 ){
    FishStront1 <- FishData1$SR_87_86[j]
    FishLike1 <- dnorm( FishStront1, mussel1b$AVG_WATER_REGION, mussel1b$STDEV_MUSSEL_REGION )
    FishLike2 <- FishLike1*0
    for( k in 1:nSite1 ){
      FishLike2[ k ] <- FishLike1[ k ]*Dist1[ row.names(Dist1) == FishLoc1, names( Dist1 ) == mussel1b$Region_ID[ k ] ]
    }
    LocProb1[ j,  ] <- FishLike2/sum( FishLike2 ) 
    ind1 <- which( FishLike2 == max( FishLike2 ))
    FishLocOut1[ j ] <- mussel1b$Region_ID[ ind1 ] 
  }
  
  return( list( FishLoc = FishLocOut1, LocProb = LocProb1 ) )
}

###############################################################################
#
# Make the classifier function that uses the smoother
# Smooth1
###############################################################################
fishLocClass2 <- function(FishData1, mussel1b, Dist1, nSite1 ){
  maxTrack1 <- nrow( FishData1 )
  FishLoc1 <- FishData1$Region2[ maxTrack1 ]
  FishLocOut1 <- matrix( FishLoc1, nrow = maxTrack1, ncol = 1 )
  FishSmooth1 <- smooth1( FishData1$SR_87_86, w1 = 5 )
  for( j in (maxTrack1-1):1 ){
    FishStront1 <- FishSmooth1[j]
    FishLike1 <- dnorm( FishStront1, mussel1b$AVG_WATER_REGION, mussel1b$STDEV_MUSSEL_REGION )
    FishLike2 <- FishLike1*0
    for( k in 1:nSite1 ){
      FishLike2[ k ] <- FishLike1[ k ]*Dist1[ row.names(Dist1) == FishLoc1, names( Dist1 ) == mussel1b$Region_ID[ k ] ]
    }
    ind1 <- which( FishLike2 == max( FishLike2 ))
    FishLocOut1[ j ] <- mussel1b$Region_ID[ ind1 ] 
  }
  return( data.frame( FishSmooth = FishSmooth1, FishLoc = FishLocOut1 ) )
}


###############################################################################
#
# Make the classifier function that uses the smoother
# smooth2
###############################################################################
fishLocClass3 <- function(FishData1, mussel1b, Dist1, nSite1 ){
  maxTrack1 <- nrow( FishData1 )
  FishLoc1 <- FishData1$Region2[ maxTrack1 ]
  FishLocOut1 <- matrix( FishLoc1, nrow = maxTrack1, ncol = 1 )
  FishSmooth1 <- smooth2( FishData1$SR_87_86, w1 = 2 )
  for( j in (maxTrack1-1):1 ){
    FishStront1 <- FishSmooth1[j]
    FishLike1 <- dnorm( FishStront1, mussel1b$AVG_WATER_REGION, mussel1b$STDEV_MUSSEL_REGION )
    FishLike2 <- FishLike1*0
    for( k in 1:nSite1 ){
      FishLike2[ k ] <- FishLike1[ k ]*Dist1[ row.names(Dist1) == FishLoc1, names( Dist1 ) == mussel1b$Region_ID[ k ] ]
    }
    ind1 <- which( FishLike2 == max( FishLike2 ))
    FishLocOut1[ j ] <- mussel1b$Region_ID[ ind1 ] 
  }
  return( data.frame( FishSmooth = FishSmooth1, FishLoc = FishLocOut1 ) )
}


###############################################################################
#
# Make the Simulation function No Smoother here.
#
###############################################################################
fishLocSim1 <- function(FishData1, mussel1b, Dist1, nSite1 ){
  maxTrack1 <- nrow( FishData1 )
  FishLoc1 <- FishData1$Region2[ maxTrack1 ]
  FishLocOut1 <- matrix( FishLoc1, nrow = maxTrack1, ncol = 1 )
  FishLocOut1[ maxTrack1 ] <- FishLoc1
  LocProb1 <- data.frame( matrix( 0, nrow = maxTrack1, ncol = nSite1 ) )
  names(LocProb1) <- mussel1b$Region_ID
  LocProb1[ maxTrack1, ] <- ifelse( FishData1$Region2[ maxTrack1 ] == mussel1b$Region_ID, 1 , 0 ) 
  for( j in (maxTrack1-1):1 ){
    FishStront1 <- FishData1$SR_87_86[j]
    FishLike1 <- dnorm( FishStront1, mussel1b$AVG_WATER_REGION, mussel1b$STDEV_MUSSEL_REGION )
    FishLike2 <- FishLike1*0
    for( k in 1:nSite1 ){
      FishLike2[ k ] <- FishLike1[ k ]*Dist1[ row.names(Dist1) == FishLoc1, names( Dist1 ) == mussel1b$Region_ID[ k ] ]
    }
    LocProb1[ j,  ] <- FishLike2/sum( FishLike2 ) 
    ind1 <- sample( 1:nSite1, 1, replace = FALSE, prob = LocProb1[j,])
    FishLoc1 <- mussel1b$Region_ID[ ind1 ] 
    FishLocOut1[ j ] <- FishLoc1 
  }
  return( FishLocOut1 )
}


###############################################################################
#
# Make the Simulation function Smoother here (Trailing 5).
#
###############################################################################
fishLocSim2 <- function(FishData1, mussel1b, Dist1, nSite1 ){
  maxTrack1 <- nrow( FishData1 )
  FishLoc1 <- FishData1$Region2[ maxTrack1 ]
  FishLocOut1 <- matrix( FishLoc1, nrow = maxTrack1, ncol = 1 )
  FishLocOut1[ maxTrack1 ] <- FishLoc1
  FishSmooth1 <- smooth1( FishData1$SR_87_86, w1 = 5 )
  LocProb1 <- data.frame( matrix( 0, nrow = maxTrack1, ncol = nSite1 ) )
  names(LocProb1) <- mussel1b$Region_ID
  LocProb1[ maxTrack1, ] <- ifelse( FishData1$Region2[ maxTrack1 ] == mussel1b$Region_ID, 1 , 0 ) 
  for( j in (maxTrack1-1):1 ){
    FishStront1 <- FishSmooth1[j]
    FishLike1 <- dnorm( FishStront1, mussel1b$AVG_WATER_REGION, mussel1b$STDEV_MUSSEL_REGION )
    FishLike2 <- FishLike1*0
    for( k in 1:nSite1 ){
      FishLike2[ k ] <- FishLike1[ k ]*Dist1[ row.names(Dist1) == FishLoc1, names( Dist1 ) == mussel1b$Region_ID[ k ] ]
    }
    LocProb1[ j,  ] <- FishLike2/sum( FishLike2 ) 
    ind1 <- sample( 1:nSite1, 1, replace = FALSE, prob = LocProb1[j,])
    FishLoc1 <- mussel1b$Region_ID[ ind1 ] 
    FishLocOut1[ j ] <- FishLoc1 
  }
  return( FishLocOut1 )
}


###############################################################################
#
# Make the Simulation function Smoother here (Centered 5).
#
###############################################################################
fishLocSim3 <- function(FishData1, mussel1b, Dist1, nSite1 ){
  maxTrack1 <- nrow( FishData1 )
  FishLoc1 <- FishData1$Region2[ maxTrack1 ]
  FishLocOut1 <- matrix( FishLoc1, nrow = maxTrack1, ncol = 1 )
  FishLocOut1[ maxTrack1 ] <- FishLoc1
  FishSmooth1 <- smooth2( FishData1$SR_87_86, w1 = 2 )
  LocProb1 <- data.frame( matrix( 0, nrow = maxTrack1, ncol = nSite1 ) )
  names(LocProb1) <- mussel1b$Region_ID
  LocProb1[ maxTrack1, ] <- ifelse( FishData1$Region2[ maxTrack1 ] == mussel1b$Region_ID, 1 , 0 ) 
  for( j in (maxTrack1-1):1 ){
    FishStront1 <- FishSmooth1[j]
    FishLike1 <- dnorm( FishStront1, mussel1b$AVG_WATER_REGION, mussel1b$STDEV_MUSSEL_REGION )
    FishLike2 <- FishLike1*0
    for( k in 1:nSite1 ){
      FishLike2[ k ] <- FishLike1[ k ]*Dist1[ row.names(Dist1) == FishLoc1, names( Dist1 ) == mussel1b$Region_ID[ k ] ]
    }
    LocProb1[ j,  ] <- FishLike2/sum( FishLike2 ) 
    ind1 <- sample( 1:nSite1, 1, replace = FALSE, prob = LocProb1[j,])
    FishLoc1 <- mussel1b$Region_ID[ ind1 ] 
    FishLocOut1[ j ] <- FishLoc1 
  }
  return( FishLocOut1 )
}




LocNames1 <- mussel1b$Region_ID
##############################################################################
#
# Create the summary
#
##############################################################################
LocSummary1 <- function( FishLoc1Hold, LocNames1 ){
  res1 <- matrix( 0, nrow = nrow( FishLoc1Hold ), ncol = length( LocNames1 ) )
  n2 <- ncol( FishLoc1Hold )
  for( i in 1:length( LocNames1 ) ){
    LocHold1 <- LocNames1[ i ]
    FishInd1 <- ifelse( FishLoc1Hold == LocHold1, 1, 0 )
    Tot1 <- apply( FishInd1, 1, sum )
    res1[ , i ] <- Tot1/n2
  }
  res2 <- data.frame( res1 )
  names( res2 ) <- LocNames1
  return(res2)
}



# ###############################################################################
# #
# # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# #  No Smoother
# #
# #
# nSim1 <- 100
# ###############################################################################
# #
# # Process all the fish
# #
# ###############################################################################
# for( fish1no in 1:10){
#   #length( FishID1 ) )
#   FishID2 <- FishID1[ fish1no ]
#   FishData1 <- fish1[ fish1$SAMPLE_CODE == FishID2, ]
#   FishName1 <- unique( FishData1$CORRECTED_SPECIES )
#   Distance2 <- FRange1$Range[FRange1$Species == FishName1 ]
#   Dist1 <- exp(-MDist1/Distance2)
#   row.names(Dist1) <- names(Dist1)
#   #maxTrack1 <- nrow( FishData1 )
#   #FishLoc1 <- FishData1$Region2[ maxTrack1 ]
#   #FishLocOut1 <- matrix( FishLoc1, nrow = maxTrack1, ncol = 1 )
#   FishLoc1Hold <- matrix("A", nrow = nrow( FishData1 ) , ncol = nSim1 )
#   for( i in 1:nSim1){ 
#     FishLocOut1temp <- fishLocSim1( FishData1, mussel1b, Dist1, nSite1 )
#     FishLoc1Hold[ , i ] <- FishLocOut1temp
#   }
#   FishLocOut1 <- LocSummary1( FishLoc1Hold, mussel1b$Region_ID )
#   # <- fishLocClass2( FishData1, mussel1b, Dist1, nSite1 )
#   #FishLocOut3 <- fishLocClass3( FishData1, mussel1b, Dist1, nSite1 )
#   #for( j in (maxTrack1-1):1 ){
#   #  FishStront1 <- FishData1$SR_87_86[j]
#   #  FishLike1 <- dnorm( FishStront1, mussel1b$WATER_MEAN, mussel1b$MUSSEL_STDEV )
#   #  FishLike2 <- FishLike1*0
#   #  for( k in 1:nSite1 ){
#   #    FishLike2[ k ] <- FishLike1[ k ]*Dist1[ row.names(Dist1) == FishLoc1, names( Dist1 ) == mussel1b$Region_ID[ k ] ]
#   #  }
#   #  ind1 <- which( FishLike2 == max( FishLike2 ))
#   #  FishLocOut1[ j ] <- mussel1b$Region_ID[ ind1 ] 
#   #}
#   
#   Fish2OutHold <- data.frame( FishData1, 
#                               FishLocOut1 )
#   FishOut1 <- rbind( FishOut1, Fish2OutHold )
#   #LocProbOut2 <- data.frame( FishData1, 
#   #                           FishLocOut1$LocProb)#, 
#                               #SR_Smooth = FishLocOut2$FishSmooth,
#                               #LocSmooth = FishLocOut2$FishLoc,
#                               #SR_Smooth2 = FishLocOut3$FishSmooth,
#                               #Loc_Smooth2 = FishLocOut3$FishLoc )
#   
#   #LocProbOut1 <- rbind( LocProbOut1, LocProbOut2)
# }
# 
# write.csv( FishOut1, "First10FishSim100_V9.csv", row.names = FALSE )
# #write.csv( LocProbOut1, "First10Fish_Loc_Prob_Version9.csv", row.names = FALSE )


t1a <- Sys.time()
###############################################################################
#
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#  Smoother with bandwidth of 5
#
#
nSim1 <- 1000
###############################################################################
#
# Process all the fish
#
###############################################################################
for( fish1no in FishBatch1){
  #length( FishID1 ) )
  FishID2 <- FishID1[ fish1no ]
  FishData1 <- fish1[ fish1$SAMPLE_CODE == FishID2, ]
  FishName1 <- unique( FishData1$CORRECTED_SPECIES )
  Distance2 <- FRange1$Range[FRange1$Species == FishName1 ]
  Dist1 <- exp(-MDist1/Distance2)
  row.names(Dist1) <- names(Dist1)
  #maxTrack1 <- nrow( FishData1 )
  #FishLoc1 <- FishData1$Region2[ maxTrack1 ]
  #FishLocOut1 <- matrix( FishLoc1, nrow = maxTrack1, ncol = 1 )
  FishLoc0Hold <- matrix("A", nrow = nrow( FishData1 ) , ncol = nSim1 )
  FishLoc1Hold <- matrix("A", nrow = nrow( FishData1 ) , ncol = nSim1 )
  FishLoc3Hold <- matrix("A", nrow = nrow( FishData1 ) , ncol = nSim1 )
  for( i in 1:nSim1){ 
    FishLocOut0temp <- fishLocSim1( FishData1, mussel1b, Dist1, nSite1 )
    FishLoc0Hold[ , i ] <- FishLocOut0temp
    FishLocOut1temp <- fishLocSim2( FishData1, mussel1b, Dist1, nSite1 )
    FishLoc1Hold[ , i ] <- FishLocOut1temp
    FishLocOut3temp <- fishLocSim3( FishData1, mussel1b, Dist1, nSite1 )
    FishLoc3Hold[ , i ] <- FishLocOut3temp
    
  }
  FishLocOut0 <- LocSummary1( FishLoc0Hold, mussel1b$Region_ID )
  FishLocOut1 <- LocSummary1( FishLoc1Hold, mussel1b$Region_ID )
  FishLocOut3 <- LocSummary1( FishLoc3Hold, mussel1b$Region_ID )

  
  Fish2OutHold <- data.frame( FishData1, 
                              FishLocOut1 )
  FishOut1 <- rbind( FishOut1, Fish2OutHold )
  Fish0OutHold <- data.frame( FishData1, 
                              FishLocOut0)
  FishOut0 <- rbind( FishOut0, Fish0OutHold )
  Fish3OutHold <- data.frame( FishData1, 
                              FishLocOut3)
  FishOut3 <- rbind( FishOut3, Fish3OutHold )

}

write.table( FishOut1, "SimOut/First10FishSim1000SmoothTrail5_V9.csv", 
             row.names = FALSE, 
             append = TRUE,
             sep =",",
             col.names =FALSE)
write.table( FishOut0, "SimOut/First10FishSim1000Raw_V9.csv", 
             row.names = FALSE, 
             append = TRUE,
             sep = ",",
             col.names = FALSE)
write.table( FishOut3, "SimOut/First10FishSim1000SmoothCenter5_V9.csv", 
             row.names = FALSE, 
             append = TRUE,
             sep = ",",
             col.names = FALSE )

out1 <- Sys.time() - t1a 
out1
